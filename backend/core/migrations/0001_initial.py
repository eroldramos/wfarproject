# Generated by Django 4.0.4 on 2022-08-06 19:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('user_type', models.PositiveSmallIntegerField(default=1)),
                ('emp_no', models.CharField(max_length=25, unique=True)),
                ('middle_name', models.CharField(max_length=200, null=True)),
                ('accepted_at', models.DateTimeField(null=True)),
                ('extension_name', models.CharField(max_length=200, null=True)),
                ('birthdate', models.DateField(null=True)),
                ('civil_status', models.PositiveSmallIntegerField(default=0)),
                ('sex', models.PositiveSmallIntegerField(default=0)),
                ('house_no', models.PositiveIntegerField(default=0)),
                ('street', models.CharField(max_length=200)),
                ('subdivision', models.CharField(max_length=200, null=True)),
                ('barangay', models.CharField(max_length=200)),
                ('municipality', models.CharField(max_length=200)),
                ('province', models.CharField(max_length=200)),
                ('zip_code', models.PositiveIntegerField(default=0)),
                ('contact_no', models.CharField(max_length=20, unique=True)),
                ('specialization', models.CharField(max_length=200, null=True)),
                ('view_id', models.CharField(max_length=10, null=True)),
                ('program', models.CharField(max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('profile_picture', models.ImageField(default='/avatar.svg', null=True, upload_to='profile_picture')),
                ('signature', models.ImageField(null=True, upload_to='signatures')),
                ('assignee_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200)),
                ('school_year', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('no_of_weeks', models.PositiveIntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WFAR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checked_at', models.DateTimeField(null=True)),
                ('submitted_at', models.DateTimeField(null=True)),
                ('week_no', models.PositiveIntegerField()),
                ('faculty_checker_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faculty_checkers', to=settings.AUTH_USER_MODEL)),
                ('faculty_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wfars', to=settings.AUTH_USER_MODEL)),
                ('semester_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.semester')),
            ],
        ),
        migrations.CreateModel(
            name='WFAR_Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accomplishment_date', models.DateField()),
                ('subject', models.CharField(max_length=200)),
                ('course_year_section', models.CharField(max_length=200)),
                ('no_of_attendees', models.PositiveIntegerField()),
                ('recording_url', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(null=True)),
                ('wfar_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wfar_entries', to='core.wfar')),
            ],
        ),
        migrations.CreateModel(
            name='WFAR_Entry_Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_uri', models.ImageField(upload_to='uploads/')),
                ('type', models.PositiveSmallIntegerField(default=1)),
                ('wfar_entry_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wfar_entry_attachments', to='core.wfar_entry')),
            ],
        ),
        migrations.CreateModel(
            name='WFAR_Entry_Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=500)),
                ('wfar_entry_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wfar_entry_activities', to='core.wfar_entry')),
            ],
        ),
        migrations.CreateModel(
            name='WFAR_Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('faculty_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('wfar_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wfar')),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('semester_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.semester')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detail', models.TextField(max_length=1000)),
                ('type', models.PositiveSmallIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(null=True)),
                ('faculty_registered_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faculty_registered', to=settings.AUTH_USER_MODEL)),
                ('owner_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faculty_owner', to=settings.AUTH_USER_MODEL)),
                ('wfar_comment_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.wfar_comment')),
                ('wfar_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.wfar')),
            ],
        ),
    ]
